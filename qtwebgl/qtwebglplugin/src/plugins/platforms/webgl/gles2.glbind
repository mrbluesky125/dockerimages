%# To generate gles2.cpp, run: node marshal_gen/genapi.js --file=marshal_gen/gl.xml --api=gles2 --apiversion=2.0 --extensions=gles_extensions.glbind gles2.glbind  > gles2.cpp

%%code createEventStmt
var s = "    QWebGLFunctionCall *event = new QWebGLFunctionCall(QStringLiteral(\"" + glfunc.name + "\"), " + (glfunc.ret !== "void" ? "true" : "false") + ");\n"
s += "    const auto id =  event->id();"
s

%%code parametersStmt
var s = "";
for (var i = 0; i < glfunc.params.length; ++i) {
    var param = glfunc.params[i]
    if (param.type === "GLenum" || param.type === "GLint" || param.type === "GLsizei" || param.type === "GLboolean")
        s += "    event->addInt(" + param.name + ");\n"
    else if (param.type === "GLuint")
        s += "    event->addUInt(" + param.name + ");\n"
    else if (param.type === "GLfloat")
        s += "    event->addFloat(" + param.name + ");\n"
    else if (param.type === "const GLchar *")
        s += "    event->addString(" + param.name +");\n"
}
if (glfunc.ret !== "void" && glfunc.ret !== "const GLubyte *")
s += "    integrationPlugin()->wsServer()->mutex()->lock();\n"
s += "    QCoreApplication::postEvent(integrationPlugin()->wsServer(), event);"
s

%%code returnStmt
var s = ""
if (glfunc.ret === "const GLubyte *") {
    s += "return (const GLubyte *)\"string\";"
} else if (glfunc.ret !== "void") {
    s += "integrationPlugin()->wsServer()->waitCondition()->wait(integrationPlugin()->wsServer()->mutex());\n"
    s += "    integrationPlugin()->wsServer()->mutex()->unlock();\n"
    if (glfunc.ret === "GLuint")
        s += "    auto value = integrationPlugin()->wsServer()->queryValue(id).toUInt();\n"
    else
        s += "    auto value = integrationPlugin()->wsServer()->queryValue(id).toInt();\n"
    s += "    return value;"
} else {
    s += "// return;"
}
%#var s = glfunc.ret !== "void" ? "return 0;" : "// return;"
"    " + s

%%copy
// Automatically generated file, do not edit.

#include "qwebglintegration.h"
#include "qwebglfunctioncall.h"

#include <QtGui/qopengl.h>
#include <QtGui/qguiapplication.h>
#include <private/qguiapplication_p.h>

QT_BEGIN_NAMESPACE

static QWebGLIntegration *integrationPlugin()
{
    auto application = QGuiApplicationPrivate::instance();
    return static_cast<decltype(integrationPlugin())>(application->platformIntegration());
}

%%for-each-function
static %{RET} qt%{NAME}(%{PARAMS})
{
%{RUN createEventStmt}
%{RUN parametersStmt}
%{RUN returnStmt}
}

%%copy
QT_END_NAMESPACE
